//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

// Layers
#define CO 0
#define QW 1
#define GAME 2
#define SYM 3
#define NUM 4
#define EXT 5
#define SYS 6
#define COMBO_LAYERS CO QW SYM EXT NUM SYS

#include "totem_keys.h"
#include "behaviors.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TRANS_LAST_ROW_HALF &trans &trans &trans
#define TRANS_LAST_ROW TRANS_LAST_ROW_HALF TRANS_LAST_ROW_HALF
#define LAG LA(LGUI)
#define LCG LC(LGUI)
#define LSG LS(LGUI)
#define LAC LC(LALT)
#define LAS LS(LALT)

/ {
  macros {
    ZMK_MACRO(uc_gbp  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp A &kp N3>, <&kp RET>;)
    ZMK_MACRO(uc_eur  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp A &kp C>, <&kp RET>;)
    ZMK_MACRO(uc_rup  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp B &kp N9>, <&kp RET>;)
    ZMK_MACRO(vi_sav  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp ESC &kp COLON &kp W>, <&kp RET>;)
    ZMK_MACRO(runner  , bindings = <&kp LC(SPACE)>;)
    ZMK_MACRO(find    , bindings = <&kp LC(F)>;)
    ZMK_MACRO(pre_tab , bindings = <&kp LC(LS(TAB))>;)
    ZMK_MACRO(nex_tab , bindings = <&kp LC(TAB)>;)
    ZMK_MACRO(pre_dsk , bindings = <&kp LC(LG(LEFT))>;)
    ZMK_MACRO(nex_dsk , bindings = <&kp LC(LG(RIGHT))>;)
    ZMK_MACRO(tmux    , bindings = <&kp LC(B)>;)
    ZMK_MACRO(cut     , bindings = <&kp LC(X)>;)
    ZMK_MACRO(copy    , bindings = <&kp LC(C)>;)
    ZMK_MACRO(paste   , bindings = <&kp LC(V)>;)
  };
};

ZMK_CONDITIONAL_LAYER(EXT SYM, SYS)

// Colemak Layer
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃   Q   ┃   W   ┃   F   ┃   P   ┃   B   ┃   ┃   J   ┃   L   ┃   U   ┃   Y   ┃   ;   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃   A   ┃   R   ┃   S   ┃   T   ┃   G   ┃   ┃   M   ┃   N   ┃   E   ┃   I   ┃   O   ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃ NUM/- ┃   Z   ┃   X   ┃   C   ┃   D   ┃   V   ┃   ┃   K   ┃   H   ┃   ,   ┃   .   ┃   /   ┃ NUM/' ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃NUM/  ┃  SPC  ┃EXT/ESC┃   ┃ SYM/ ┃ LSHFT ┃ NUM/ ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZMK_LAYER(colemak_dh,
                 &kp Q &kp W       &hml LCG F  &hml LAG P  &hml LSG B   /**/ &hmr LSG J   &hmr LAG L  &hmr LCG U     &kp  Y      &kp SEMI
                 &kp A &hml LGUI R &hml LCTL S &hml LALT T &hml LSHFT G /**/ &hmr LSHFT M &hmr LALT N &hmr LCTL E    &hmr LGUI I &kp O
  &hll NUM MINUS &kp Z &kp X       &hml LAC C  &kp D       &hml LAS V   /**/ &hmr LAS K   &kp H       &hmr LAC COMMA &kp DOT     &kp FSLH &hlr NUM SQT

                                    &lt_bsdel NUM 0 &kp SPC &lt EXT ESC /**/ &lt SYM RET &kp LSHFT &lt NUM TAB
)

// QWERTY Layer
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃   Q   ┃   W   ┃   E   ┃   R   ┃   T   ┃   ┃   Y   ┃   U   ┃   I   ┃   O   ┃   P   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃   A   ┃   S   ┃   D   ┃   F   ┃   G   ┃   ┃   H   ┃   J   ┃   K   ┃   L   ┃   ;   ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃ SYS/- ┃   Z   ┃   X   ┃   C   ┃   V   ┃   B   ┃   ┃   N   ┃   M   ┃   ,   ┃   .   ┃   /   ┃  SYS/'┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃NUM/  ┃  SPC  ┃EXT/ESC┃   ┃ SYM/ ┃ LSHFT ┃ NUM/ ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZMK_LAYER(qwerty,
          &trans &trans      &hml LCG E  &hml LAG R  &hml LSG T /**/ &hmr LSG Y   &hmr LAG U  &hmr LCG I     &kp O       &kp P
          &trans &hml LGUI S &hml LCTL D &hml LALT F &trans     /**/ &hml LSHFT H &hmr LALT J &hmr LCTL K    &hmr LGUI L &kp SEMI
   &trans &trans &trans      &hml LAC C  &kp V       &hml LAS B /**/ &hmr LAS N   &kp M       &hmr LAC COMMA &trans      &kp FSLH &trans

          TRANS_LAST_ROW
)

// GAME Layer
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃      ┃   Q   ┃   W   ┃   E   ┃   R   ┃   ┃       ┃   7   ┃   8   ┃   9   ┃   0   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃ LCTL  ┃   A   ┃   S   ┃   D   ┃   F   ┃   ┃       ┃   4   ┃   5   ┃   6   ┃       ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃SYS/ESC┃ LSHFT ┃   Z   ┃   X   ┃   C   ┃   V   ┃   ┃       ┃   1   ┃   2   ┃   3   ┃       ┃ GAME襤┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃ LALT  ┃  RET  ┃  SPC  ┃   ┃  SFT  ┃ SYM/ ┃      ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZMK_LAYER(game,
          &kp TAB   &kp Q &kp W &kp E &kp R /**/ &none &kp N7 &kp N8 &kp N9 &kp N0
          &kp LCTL  &kp A &kp S &kp D &kp F /**/ &none &kp N4 &kp N5 &kp N6 &none
  &kp ESC &kp LSHFT &kp Z &kp X &kp C &kp V /**/ &none &kp N1 &kp N2 &kp N3 &none  &tog GAME

                 &kp LALT &kp RET &kp SPACE /**/ &kp LSHFT &lt SYM RET  &kp SQT
)

// Symbols
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃   1   ┃   2   ┃   3   ┃   4   ┃   5   ┃   ┃   6   ┃   7   ┃   8   ┃   9   ┃   0   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃   !   ┃   @   ┃   #   ┃   $   ┃      ┃   ┃      ┃   &   ┃   *   ┃   %   ┃   ^   ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃       ┃   \   ┃   |   ┃   +   ┃   =   ┃   ~   ┃   ┃      ┃   ?   ┃   ,   ┃   .   ┃   /   ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃NUM/  ┃  SPC  ┃EXT/ESC┃   ┃ SYM/ ┃ LSHFT ┃ NUM/ ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZMK_LAYER(symbol,
         &kp N1   &kp N2   &kp N3   &kp N4   &kp N5    /**/ &kp N6  &kp N7    &kp N8    &kp N9    &kp N0
         &kp EXCL &kp AT   &kp HASH &kp DLLR &uc_gbp   /**/ &uc_rup &kp AMPS  &kp STAR  &kp PRCNT &kp CARET
  &trans &kp BSLH &kp PIPE &kp PLUS &kp EQL  &kp TILDE /**/ &uc_eur &kp QMARK &kp COMMA &kp DOT   &kp FSLH  &trans

  TRANS_LAST_ROW
)

// Numbers and Function Keys
ZMK_LAYER(numfun,
         &kp PLUS &kp N7 &kp N8 &kp N9 &kp MINUS /**/ &none &kp F1 &kp F2  &kp F3  &kp F4
         &kp N0   &kp N4 &kp N5 &kp N6 &kp EQL   /**/ &none &kp F5 &kp F6  &kp F7  &kp F8
  &trans &kp FSLH &kp N1 &kp N2 &kp N3 &kp STAR  /**/ &none &kp F9 &kp F10 &kp F11 &kp F12  &trans

  TRANS_LAST_ROW
)

// Extend Layer with Macros and Special Keys
ZMK_LAYER(extend,
        &none   &none     &pre_dsk   &nex_dsk    &kp C_VOL_UP /**/ &kp HOME &kp PG_DN    &kp PG_UP    &kp END   &kp CAPS
        &vi_sav &find     &pre_tab   &nex_tab    &kp C_MUTE   /**/ &kp LEFT &kp DOWN     &kp UP       &kp RIGHT &runner
  &none &none   &kp K_CUT &kp K_COPY &kp K_PASTE &kp C_VOL_DN /**/ &none    &kp C_BRI_DN &kp C_BRI_UP &none     &none   &kp DEL

  TRANS_LAST_ROW
)

// System Settings
ZMK_LAYER(system,
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR  /**/ &none       &none &none &none &none
        &tog GAME    &none        &none        &none        &sys_reset  /**/ &sys_reset  &none &none &none &none
  &none &none        &none        &none        &none        &bootloader /**/ &bootloader &none &none &none &none &none

  TRANS_LAST_ROW
)

// vi:ft=dts
