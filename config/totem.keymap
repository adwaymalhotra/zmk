//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "hold_tap_behaviors.dtsi"
#include "combos.dtsi"
#include "behaviors.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define CO 0
#define CO_MAC 1
#define QW 2
#define QW_MAC 3
#define GAME 4
#define SY 5
#define EX 6
#define FN 7

#define TRANS_LAST_ROW_HALF &trans &trans &trans
#define TRANS_LAST_ROW TRANS_LAST_ROW_HALF TRANS_LAST_ROW_HALF
#define LAG LA(LGUI)
#define LCG LC(LGUI)
#define LSG LS(LGUI)

/ {
  macros {
    ZMK_MACRO(uc_gbp  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N0 &kp N0 &kp A &kp N3>, <&kp SPACE>;)
    ZMK_MACRO(uc_eur  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp A &kp C>, <&kp SPACE>;)
    ZMK_MACRO(uc_rup  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp B &kp N9>, <&kp SPACE>;)
    ZMK_MACRO(vi_sav  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp COLON &kp W>, <&kp RET>;)
    ZMK_MACRO(runner  , bindings = <&kp LC(SPACE)>;)
    ZMK_MACRO(find    , bindings = <&kp LC(F)>;)
    ZMK_MACRO(pre_tab , bindings = <&kp LC(LS(TAB))>;)
    ZMK_MACRO(nex_tab , bindings = <&kp LC(TAB)>;)
    ZMK_MACRO(pre_dsk , bindings = <&kp LC(LG(LEFT))>;)
    ZMK_MACRO(nex_dsk , bindings = <&kp LC(LG(RIGHT))>;)
    ZMK_MACRO(tmux    , bindings = <&kp LC(B)>;)
    ZMK_MACRO(cut     , bindings = <&kp LC(X)>;)
    ZMK_MACRO(copy    , bindings = <&kp LC(C)>;)
    ZMK_MACRO(paste   , bindings = <&kp LC(V)>;)
  };

  behaviors {
    bsdel: backspace_delete {
      compatible = "zmk, behavior-mod-morph";
      label = "BS_DEL";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT)>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

// Colemak Layer
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃   Q   ┃   W   ┃   F   ┃   P   ┃   B   ┃   ┃   J   ┃   L   ┃   U   ┃   Y   ┃   ;   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃   A   ┃   R   ┃   S   ┃   T   ┃   G   ┃   ┃   M   ┃   N   ┃   E   ┃   I   ┃   O   ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃ FN/-  ┃   Z   ┃   X   ┃   C   ┃   D   ┃   V   ┃   ┃   K   ┃   H   ┃   ,   ┃   .   ┃   /   ┃  FN/' ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃      ┃EX/ESC ┃  SPC  ┃   ┃ LSHFT ┃ SYM/ ┃      ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      colemak_dh {
        bindings = <
               &kp Q &kp W       &hml LAG F  &hml LCG P  &hml LSG B   /**/ &hmr LSG J   &hmr LCG L  &hmr LAG U  &kp  Y      &kp SEMI
               &kp A &hml LGUI R &hml LALT S &hml LCTL T &hml LSHFT G /**/ &hmr LSHFT M &hmr LCTL N &hmr LALT E &hmr LGUI I &kp O
 &hll FN MINUS &kp Z &kp X       &kp C       &kp D       &kp V        /**/ &kp K        &kp H       &kp COMMA   &kp DOT     &kp FSLH    &hlr FN SQT

                                        &bsdel &htl EX &gresc &kp SPC /**/ &kp LSHFT &htl SY RET &kp TAB
        >;
      };

      colemak_dh_mac {
        bindings = <
          &trans &hml LCG W  &trans &kp P       &trans /**/ &trans &kp L       &trans &hmr LCG Y  &trans
          &trans &hml LCTL R &trans &hml LGUI T &trans /**/ &trans &hmr LGUI N &trans &hmr LCTL I &none
   &trans &trans &trans      &trans &trans      &trans /**/ &trans &trans      &trans &trans      &trans &trans

          TRANS_LAST_ROW
        >;
      };

// QWERTY Layer
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//         ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓   ┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
//         ┃   Q   ┃   W   ┃   E   ┃   R   ┃   T   ┃   ┃   Y   ┃   U   ┃   I   ┃   O   ┃   P   ┃
//         ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫
//         ┃   A   ┃   S   ┃   D   ┃   F   ┃   G   ┃   ┃   H   ┃   J   ┃   K   ┃   L   ┃   ;   ┃
// ┏━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┓
// ┃ FN/-  ┃   Z   ┃   X   ┃   C   ┃   V   ┃   B   ┃   ┃   N   ┃   M   ┃   ,   ┃   .   ┃   /   ┃  FN/' ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┫   ┣━━━━━━━╋━━━━━━━╋━━━━━━━╋━━━━━━━┻━━━━━━━┻━━━━━━━┛
//                         ┃      ┃EX/ESC ┃  SPC  ┃   ┃ LSHFT ┃ SYM/ ┃      ┃
//                         ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┛
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      qwerty {
        bindings = <
          &trans &trans      &hml LAG E  &hml LCG R  &hml LSG T /**/ &hmr LSG Y   &hmr LCG U  &hmr LAG I  &kp O       &kp P
          &trans &hml LGUI S &hml LALT D &hml LCTL F &trans     /**/ &hml LSHFT H &hmr LCTL J &hmr LALT K &hmr LGUI L &kp SEMI
   &trans &trans &trans      &trans      &kp V       &kp B      /**/ &kp N        &kp M       &trans      &trans      &kp FSLH &trans

          TRANS_LAST_ROW
        >;
      };

      qwerty_mac {
        bindings = <
          &trans &hml LCG W  &trans &kp R       &trans /**/ &trans &kp U       &trans &hmr LCG O  &trans
          &trans &hml LCTL S &trans &hml LGUI F &trans /**/ &trans &hmr LGUI J &trans &hmr LCTL L &none
   &trans &trans &trans      &trans &trans      &trans /**/ &trans &trans      &trans &trans      &trans &trans

          TRANS_LAST_ROW
        >;
      };

      // Layer for gaming
      game {
        bindings = <
              &kp TAB   &kp Q &kp W &kp E &kp R /**/ &none &kp N7 &kp N8 &kp N9 &kp N0
              &kp LCTL  &kp A &kp S &kp D &kp F /**/ &none &kp N4 &kp N5 &kp N6 &none
  &hll FN ESC &kp LSHFT &kp Z &kp X &kp C &kp V /**/ &none &kp N1 &kp N2 &kp N3 &none  &tog GAME

                    &kp LALT &kp RET &kp SPACE /**/ &kp LSHFT &htl SY RET  &kp SQT
        >;
      };

      // Symbol Layer with numbers on the top layer
      symbol {
        bindings = <
          &kp N1   &kp N2   &kp N3   &kp N4   &kp N5 /**/ &kp N6  &kp N7   &kp N8    &kp N9    &kp N0
          &kp EXCL &kp AT   &kp HASH &kp DLLR &none  /**/ &uc_rup &kp AMPS &kp STAR  &kp PRCNT &kp CARET
    &none &kp BSLH &kp PIPE &kp PLUS &kp EQL  &none  /**/ &uc_eur &uc_gbp  &kp COMMA &kp DOT   &kp FSLH  &kp DEL

          TRANS_LAST_ROW
          >;
      };

      // Extend Layer with Macros and Special Keys
      extend {
        bindings = <
          &kp DEL &vi_sav &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE /**/ &kp HOME &kp PG_DN    &kp PG_UP    &kp END   &kp CAPS
          &none   &find   &pre_tab     &nex_tab     &nex_dsk   /**/ &kp LEFT &kp DOWN     &kp UP       &kp RIGHT &runner
    &none &none   &cut    &copy        &paste       &pre_dsk   /**/ &none    &kp C_BRI_DN &kp C_BRI_UP &none     &none   &kp DEL

          TRANS_LAST_ROW
          >;
      };

      // Adjustments layer and Fn Keys
      fns {
        bindings = <
          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 /**/ &bt BT_CLR  &kp F1 &kp F2  &kp F3  &kp F4
          &none        &tog GAME    &tog CO_MAC  &tog QW_MAC  &reset       /**/ &reset      &kp F5 &kp F6  &kp F7  &kp F8
    &none &none        &none        &out OUT_BLE &out OUT_USB &bootloader  /**/ &bootloader &kp F9 &kp F10 &kp F11 &kp F12 &none

          TRANS_LAST_ROW
          >;
      };
  };
};

// vi:ft=dts
