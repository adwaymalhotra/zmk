// Layers
#define GR          0
#define GR2         1
#define QW          2
#define GAME        3
#define EXT         4
#define NFN         5
#define SYS         6
#define COMBO_LAYERS GR QW NFN

/* ZMK Headers */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
/* urob's helper (must be after including behaviors.dtsi) */
#include <zmk-helpers/helper.h>
/* my definitions */
#include "extra_keys.h"
#include "keys_en_gb_extended.h"

#define LEFT_THUMBS &thl SYS TAB &kp SFT &lt EXT ESC
#define RIGHT_THUMBS &thm CTL SPC &lt_bsdel NFN 0 &thl SYS RET

#define ALT_LEFT_THUMBS &thl SYS TAB &kp SFT &thl NFN SPC
#define ALT_RIGHT_THUMBS &lt EXT ESC &lt_bsdel NFN 0 &thl SYS RET

#define _LAYER(NAME, LT, RT, LM, RM, LB, RB, LH, RH) \
  ZMK_LAYER(NAME, \
    X_LT LT RT X_RT \
    X_LM LM RM X_RM \
    X_LB LB RB X_RB \
    X_LH LH X_MH RH X_RH \
  )
#define LAYER(NAME, LT, RT, LM, RM, LB, RB) _LAYER(NAME, LT, RT, LM, RM, LB, RB, LEFT_THUMBS, RIGHT_THUMBS)
#define ALT_LAYER(NAME, LT, RT, LM, RM, LB, RB) _LAYER(NAME, LT, RT, LM, RM, LB, RB, ALT_LEFT_THUMBS, ALT_RIGHT_THUMBS)
#define TRANS_5 &trans &trans &trans &trans &trans
#define TRANS_LAYER(NAME) LAYER(NAME, TRANS_5, TRANS_5, TRANS_5, TRANS_5, TRANS_5, TRANS_5)

#define PRIOR_IDLE_MS 160
#define QUICK_TAP_MS 175
#define TAPPING_TERM 280
#undef COMBO_TERM
#define COMBO_TERM 50

#define PRE_DSK LC(LG(LEFT))
#define NEX_DSK LC(LG(RIGHT))
#define ALT LALT
#define MET LGUI
#define SFT LSHFT
#define CTL LCTL

/* Homerow Mods */
#define MAKE_HT(NAME, MODE, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = MODE; \
        tapping-term-ms = <TAPPING_TERM>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        bindings = <HOLD>, <TAP>; \
        require-prior-idle-ms = <PRIOR_IDLE_MS>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    MAKE_HT(NAME, "balanced", HOLD, TAP, TRIGGER_POS)

MAKE_HRM(hrm_left, &kp, &kp, KEYS_R THUMBS)
MAKE_HRM(hrm_right, &kp, &kp, KEYS_L THUMBS)
MAKE_HRM(hrl_left, &mo, &kp, KEYS_R THUMBS)
MAKE_HRM(hrl_right, &mo, &kp, KEYS_L THUMBS)

#define SL(KEY) &hrm_left SFT KEY
#define CL(KEY) &hrm_left CTL KEY
#define AL(KEY) &hrm_left ALT KEY
#define ML(KEY) &hrm_left MET KEY

#define SR(KEY) &hrm_right SFT KEY
#define CR(KEY) &hrm_right CTL KEY
#define AR(KEY) &hrm_right ALT KEY
#define MR(KEY) &hrm_right MET KEY

#define NFL(KEY) &hrl_left NFN KEY
#define NFR(KEY) &hrl_right NFN KEY

#define SYL(KEY) &hrl_left SYS KEY
#define SYR(KEY) &hrl_right SYS KEY

#define EXL(KEY) &hrl_left EXT KEY
#define EXR(KEY) &hrl_right EXT KEY

MAKE_HRM(mts, &sk, &caps_word, KEYS_L KEYS_R)
MAKE_HRM(mtb, &sk, &bsdel, KEYS_L KEYS_R)
MAKE_HRM(lts, &mo, &caps_word, KEYS_L KEYS_R)

MAKE_HT(thl, "tap-preferred", &mo, &kp, KEYS_L KEYS_R)
MAKE_HT(thm, "tap-preferred", &kp, &kp, KEYS_L KEYS_R)

MAKE_HT(mt_bsdel, "hold-preferred", &kp, &bsdel, KEYS_L KEYS_R)
MAKE_HT(lt_bsdel, "hold-preferred", &mo, &bsdel, KEYS_L KEYS_R)

MAKE_HT(lt_comm, "tap-preferred", &mo, &com_sem, KEYS_R)

/* All Other Behaviors */
&sk {
    release-after-ms = <900>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

&lt {
  tapping-term-ms = <TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>;
  flavor = "hold-preferred";
};

&mt {
  tapping-term-ms = <TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>;
  flavor = "hold-preferred";
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
  /delete-property/ ignore-modifiers;
};

/* Tri State for Alt-Tab in a layer. */
ZMK_TRI_STATE(alt_tab,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
)

/* Morphs */
ZMK_MOD_MORPH(bsdel,
    bindings = <&kp BACKSPACE>, <&kp DELETE>;
    mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT)>;
)

ZMK_MOD_MORPH(dlr_gbp,
    bindings = <&kp DLLR>, <&uc_gbp>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_MOD_MORPH(amps_eur,
    bindings = <&kp AMPS>, <&uc_eur>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_MOD_MORPH(star_rup,
    bindings = <&kp STAR>, <&uc_rup>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_MOD_MORPH(dot_col,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(com_sem,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(sqt_dqt,
    bindings = <&kp SQT>, <&kp GB_DQT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(lpar_lt,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(rpar_gt,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT)>;
)

/* Combos
╭───────┬───────┬───────┬───────┬───────╮ ╭───────┬───────┬───────┬───────┬───────╮
│       │       │       │       │       │ │       │       │       │       │       │
├── ° ──┼─ &|€ ─┼── @ ──┼── ! ──┼── ` ──┤ ├── ~ ──┼── / ──┼── ? ──┼─ $|£ ─┼── % ──┤
│       │       │       │       │       │ │       │       │       │       │       │
├───────┼─ *|₹ ─┼── [ ──┼─ (|< ─┼── = ──┤ ├── \ ──┼─ )|> ─┼── ] ──┼─ #|~ ─┼── ^ ──┤
│      TAB      │       │       │       │ │       │       │       │      RET      │
╰───────┴───────┴───────┴───────┴───────╯ ╰───────┴───────┴───────┴───────┴───────╯
) */
#define SIMPLE_COMBO(NAME, KEY, COMBO_KEYS) \
    ZMK_COMBO(NAME, KEY, COMBO_KEYS, COMBO_LAYERS, COMBO_TERM, COMBO_TERM)

/* right side combos */
SIMPLE_COMBO(tilde, &kp LS(GB_HASH), RM0 RT0)
SIMPLE_COMBO(pipe,  &kp GB_BSLH,     RM0 RB0)

SIMPLE_COMBO(slash, &kp FSLH, RT1 RM1)
SIMPLE_COMBO(rpar,  &rpar_gt, RM1 RB1)

SIMPLE_COMBO(ques, &kp QUESTION, RT2 RM2)
SIMPLE_COMBO(rbkt, &kp RBKT,     RM2 RB2)

SIMPLE_COMBO(dollar, &dlr_gbp,     RT3 RM3)
SIMPLE_COMBO(hash,   &kp GB_HASH,  RM3 RB3)

SIMPLE_COMBO(perc,  &kp PRCNT, RM4 RT4)
SIMPLE_COMBO(caret, &kp CARET, RM4 RB4)

/* left side combos */
SIMPLE_COMBO(grave, &kp GRAVE, LT0 LM0)
SIMPLE_COMBO(equal, &kp EQUAL, LB0 LM0)

SIMPLE_COMBO(excl, &kp EXCL, LT1 LM1)
SIMPLE_COMBO(lpar, &lpar_lt, LM1 LB1)

SIMPLE_COMBO(at,   &kp GB_AT, LT2 LM2)
SIMPLE_COMBO(lbkt, &kp LBKT,  LM2 LB2)

SIMPLE_COMBO(amps, &amps_eur, LT3 LM3)
SIMPLE_COMBO(star, &star_rup, LB3 LM3)

SIMPLE_COMBO(degree, &uc_deg, LT4 LM4)

/* horizontal combos */
SIMPLE_COMBO(ret, &kp RET, RB3 RB4)
SIMPLE_COMBO(tab, &kp TAB, LB3 LB4)

/* Macros */
ZMK_MACRO(uc_deg,  bindings = <&kp RALT>, <&kp O>,           <&kp O>   ;tap-ms=<0>; wait-ms=<0>;)
ZMK_MACRO(uc_gbp,  bindings = <&kp RALT>, <&kp LS(L)>,       <&kp EQL> ;tap-ms=<0>; wait-ms=<0>;)
ZMK_MACRO(uc_eur,  bindings = <&kp RALT>, <&kp C>,           <&kp EQL> ;tap-ms=<0>; wait-ms=<0>;)
ZMK_MACRO(uc_rup,  bindings = <&kp RALT>, <&kp R>,           <&kp EQL> ;tap-ms=<0>; wait-ms=<0>;)
ZMK_MACRO(vi_sav,  bindings = <&kp ESC>,  <&kp COLON &kp W>, <&kp RET> ;tap-ms=<0>; wait-ms=<20>;)
ZMK_MACRO(find,    bindings = <&kp LC(F)>;)
ZMK_MACRO(pre_wor, bindings = <&kp LC(LEFT)>;)
ZMK_MACRO(nex_wor, bindings = <&kp LC(RIGHT)>;)
ZMK_MACRO(pre_tab, bindings = <&kp LC(LS(TAB))>;)
ZMK_MACRO(nex_tab, bindings = <&kp LC(TAB)>;)
ZMK_MACRO(pre_dsk, bindings = <&kp LC(LG(LEFT))>;)
ZMK_MACRO(nex_dsk, bindings = <&kp LC(LG(RIGHT))>;)
ZMK_MACRO(cut,     bindings = <&kp LC(X)>;)
ZMK_MACRO(copy,    bindings = <&kp LC(C)>;)
ZMK_MACRO(paste,   bindings = <&kp LC(V)>;)
ZMK_MACRO(half_dn, bindings = <&kp LC(D)>;)
ZMK_MACRO(half_up, bindings = <&kp LC(U)>;)

/* Keymap */
LAYER(graphite,
  &kp B  &kp L &kp D &kp W &kp Z, &sqt_dqt &kp F &kp O    &kp U     &kp J,
  &kp N  AL(R) ML(T) CL(S) SL(G), SR(Y)    CR(H) MR(A)    AR(E)     &kp I,
  SYL(Q) &kp X &kp M &kp C &kp V, &kp K    &kp P &dot_col &kp MINUS &lt_comm SYS 0
)

ALT_LAYER(graphite_alt,
  &kp B  &kp L &kp D &kp W &kp Z, &sqt_dqt &kp F &kp O    &kp U     &kp J,
  &kp N  AL(R) ML(T) CL(S) SL(G), SR(Y)    CR(H) MR(A)    AR(E)     &kp I,
  SYL(Q) &kp X &kp M &kp C &kp V, &kp K    &kp P &dot_col &kp MINUS &lt_comm SYS 0
)

LAYER(qwerty,
  &kp Q  &kp W &kp E &kp R &kp T, &kp Y &kp U &kp I   &kp O     &kp P,
  &kp A  AL(S) ML(D) CL(F) SL(G), SR(H) CR(J) MR(K)   AR(L)     &kp SEMI,
  SYL(Z) &kp X &kp C &kp V &kp B, &kp M &kp N &kp DOT &kp COMMA SYR(FSLH)
)

#if defined GAME_LAYER_KEYS
  ZMK_LAYER(game, GAME_LAYER_KEYS)
#else
  TRANS_LAYER(game)
#endif

// Extend Layer with Macros and Special Keys
_LAYER(extend,
  &none    &kp PSCRN    &pre_dsk &nex_dsk &none  , &kp HOME &kp PG_DN &kp PG_UP &kp END   &kp C_VOL_UP,
  &alt_tab &kp LC(BSPC) &pre_tab &nex_tab &vi_sav, &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &kp C_MUTE,
  &none    &sk RALT     &none    &none    &none  , &kp DEL  &pre_wor  &nex_wor  &kp INS   &kp C_VOL_DN,
  &caps_word &none &none, &kp CAPS &kp RALT &none
)

// Numpad & Function Keys
LAYER(nfn,
  &kp F1 &kp F2  &kp F3  &kp F4  &none, &kp DOT  &kp N7 &kp N8 &kp N9 &kp PLUS ,
  &kp F5 AL(F6)  ML(F7)  CL(F8)  SL(0), SR(FSLH) CR(N4) MR(N5) AR(N6) &kp N0   ,
  &kp F9 &kp F10 &kp F11 &kp F12 &none, &kp STAR &kp N1 &kp N2 &kp N3 &kp MINUS
)

// System Settings
LAYER(system,
  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR , &bt BT_CLR_ALL &none &none &none &tog GAME,
  &none        &none        &kp C_BRI_UP &kp C_BRI_DN &sys_reset , &sys_reset     &none &none &none &tog QW,
  &out OUT_BLE &out OUT_USB &none        &none        &bootloader, &bootloader    &none &none &none &tog GR2
)

// vi:ft=devicetree
