#include <behaviors.dtsi>
#include "helper.h"

/* Homerow Mods */
#define GLOBAL_QUICK_TAP_MS 150
#define QUICK_TAP_MS 175
#define TAPPING_TERM 280

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <TAPPING_TERM>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        bindings = <HOLD>, <TAP>; \
        global-quick-tap-ms = <GLOBAL_QUICK_TAP_MS>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

#define DEFAULT_COMBO(NAME, KEY, COMBO_KEYS) \
    ZMK_COMBO(NAME, KEY, COMBO_KEYS, COMBO_LAYERS, COMBO_TERM)


// The keys are fetched from the *_keys.h file sourced in the actual keymap before other includes
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)
MAKE_HRM(hll, &mo, &kp, KEYS_R THUMBS)
MAKE_HRM(hlr, &mo, &kp, KEYS_L THUMBS)


/* All Other Behaviors */
&lt {
  tapping-term-ms = <TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>;
  flavor = "hold-preferred";
};

ZMK_BEHAVIOR(bsdel, mod_morph,
    bindings = <&kp BACKSPACE>, <&kp DELETE>;
    mods = <(MOD_LALT)>;
)

// layer hold tap for the bsdel key
// the config for this is similar to the home row mods but they are usable for all keys
// usage: &lt_bsdel NUM 0
ZMK_BEHAVIOR(lt_bsdel, hold_tap,
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&bsdel>;
    global-quick-tap-ms = <GLOBAL_QUICK_TAP_MS>;
    hold-trigger-on-release;
)

// the following two things don't seem to work at all.
// tap: left-parenthesis | shft + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shft + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/* Combos */
// right side combos
DEFAULT_COMBO(lpar, &lpar_lt, RM1 RT1)
DEFAULT_COMBO(rpar, &rpar_gt, RM1 RB1)

DEFAULT_COMBO(lbkt, &kp LBKT, RM2 RT2)
DEFAULT_COMBO(rbkt, &kp RBKT, RM2 RB2)

DEFAULT_COMBO(amps, &kp AMPS, RM0 RT0)
DEFAULT_COMBO(star, &kp STAR, RM0 RB0)

DEFAULT_COMBO(perc, &kp PRCNT, RM3 RT3)
DEFAULT_COMBO(caret, &kp CARET, RM3 RB3)

// left side combos
DEFAULT_COMBO(excl, &kp EXCL, LT1 LM1)
DEFAULT_COMBO(dollar, &kp DLLR, LB1 LM1)

DEFAULT_COMBO(at, &kp AT, LT2 LM2)
DEFAULT_COMBO(hash, &kp HASH, LM2 LB2)

DEFAULT_COMBO(tilde, &kp GRAVE, LT0 LM0)
DEFAULT_COMBO(equal, &kp EQUAL, LB0 LM0)

/* Macros */
/ {
  macros {
    ZMK_MACRO(uc_gbp  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp A &kp N3>, <&kp RET>;)
    ZMK_MACRO(uc_eur  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp A &kp C>, <&kp RET>;)
    ZMK_MACRO(uc_rup  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp LC(LS(U))>, <&kp N2 &kp N0 &kp B &kp N9>, <&kp RET>;)
    ZMK_MACRO(vi_sav  , tap-ms=<0>; wait-ms=<0>; bindings = <&kp ESC &kp COLON &kp W>, <&kp RET>;)
    ZMK_MACRO(find    , bindings = <&kp LC(F)>;)
    ZMK_MACRO(pre_tab , bindings = <&kp LC(LS(TAB))>;)
    ZMK_MACRO(nex_tab , bindings = <&kp LC(TAB)>;)
    ZMK_MACRO(pre_dsk , bindings = <&kp LC(LG(LEFT))>;)
    ZMK_MACRO(nex_dsk , bindings = <&kp LC(LG(RIGHT))>;)
    ZMK_MACRO(cut     , bindings = <&kp LC(X)>;)
    ZMK_MACRO(copy    , bindings = <&kp LC(C)>;)
    ZMK_MACRO(paste   , bindings = <&kp LC(V)>;)
  };
};
